# .github/workflows/docker-build.yml

name: Docker Build & Push

on:
  workflow_call:
    inputs:
      image_version:
        required: true
        type: string
      service:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      DOCKER_NAMESPACE: pathfindersh
      BASE_PATH: ./hipster/src
      IMAGE_VERSION: ${{ github.event.inputs.IMAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ runner.os }}-


      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: pathfindersh
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push all services (with skip if exists)
        run: |
          for service in $(ls $BASE_PATH); do
            echo "üîß Processing $service"

            IMAGE_TAG="${DOCKER_NAMESPACE}/hipster-app:${service}-${IMAGE_VERSION}"

            # Check if image already exists on Docker Hub
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              https://hub.docker.com/v2/repositories/${DOCKER_NAMESPACE}/hipster-app/tags/${service}-${IMAGE_VERSION})

            if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ Image $IMAGE_TAG already exists. Skipping build & push."
              continue
            fi

            # Determine Dockerfile and context
            if [ "$service" = "cartservice" ]; then
              DOCKERFILE="$BASE_PATH/$service/src/Dockerfile"
              CONTEXT="$BASE_PATH/$service/src"
            else
              DOCKERFILE="$BASE_PATH/$service/Dockerfile"
              CONTEXT="$BASE_PATH/$service"
            fi

            echo "üèóÔ∏è Building $IMAGE_TAG using $DOCKERFILE"
            docker buildx build \
              --cache-from=type=local,src=/tmp/.buildx-cache \
              --cache-to=type=local,dest=/tmp/.buildx-cache \
              --tag $IMAGE_TAG \
              --file $DOCKERFILE \
              $CONTEXT \
              --push


          done
